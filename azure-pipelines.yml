# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

# azure-pipelines.yml
trigger:
  - $(branch)  # Change if your default branch is different

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_OPTS: "-Xmx1024m"
  MAVEN_USER_HOME: $(Pipeline.Workspace)/.m2

steps:
  # Step 1: Checkout repo
  - checkout: self
    clean: true

  # Step 2: Install Java 21
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '21'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  # Step 3: Cache Maven dependencies
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
      path: $(MAVEN_USER_HOME)

  # Step 4: Run Selenium + Cucumber Tests
  - script: |
      mvn clean verify \
        -Dmaven.repo.local=$(MAVEN_USER_HOME)/repository \
        -Denv=$(environment) \
        -Dbrowser=$(browser) \
        -Dcucumber.filter.tags=@$(tag) \
        -Dmaven.test.failure.ignore=true
    displayName: 'Run Selenium Java Cucumber Tests'
    continueOnError: true
    condition: always()

  # Step 5: Publish Test Results (even if tests fail)
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
      failTaskOnFailedTests: false
      testRunTitle: 'Selenium Test Results'
    condition: always()
    displayName: 'Publish Test Results'

  # Step 6: Install Allure CLI
  - script: |
      sudo apt-get update
      sudo apt-get install -y unzip
      wget https://github.com/allure-framework/allure2/releases/download/2.34.1/allure-2.34.1.zip
      unzip allure-2.34.1.zip -d /opt/
      sudo ln -s /opt/allure-2.34.1/bin/allure /usr/bin/allure
    displayName: 'Install Allure CLI'
    condition: always()

  # Step 7: Generate Allure Report (even if tests fail)
  - script: |
      if [ -d "target/allure-results" ]; then
        allure generate target/allure-results --clean -o target/allure-report
      else
        echo "No allure-results directory found, creating empty report"
        mkdir -p target/allure-report
        echo "<html><body><h1>No test results found</h1></body></html>" > target/allure-report/index.html
      fi
    displayName: 'Generate Allure Report'
    condition: always()

  # Step 8: Publish Allure report as artifact
  - task: CopyFiles@1
    inputs:
      sourceFolder: 'target/allure-report'
      targetFolder: $(Build.ArtifactStagingDirectory)
    condition: always()

  # Step 9: Publish Screenshots (if any failures occurred)
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: 'AllureReport'
    condition: always()

  # Step 10: Set pipeline result based on preference
  - script: |
      echo "Pipeline completed. Check test results and artifacts for details."
      echo "##vso[task.complete result=Succeeded;]Pipeline succeeded regardless of test results"
    displayName: 'Set Pipeline Status'
    condition: always()